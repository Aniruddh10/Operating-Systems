#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

// Driver code
int main()
{
int pid, pid1, pid2;

// variable pid will store the
// value returned from fork() system call
pid = fork();

// If fork() returns zero then it
// means it is child process.
if (pid == 0) {

// First child needs to be printed
// later hence this process is made
// to sleep for 3 seconds.
sleep(3);

// This is first child process
// getpid() gives the process
// id and getppid() gives the
// parent id of that process.
printf(&quot;child[1] --&gt; pid = %d and ppid = %d\n&quot;,
getpid(), getppid());

}

else {
pid1 = fork();
if (pid1 == 0) {

sleep(2);
printf(&quot;child[2] --&gt; pid = %d and ppid = %d\n&quot;,
getpid(), getppid());

}
else {
pid2 = fork();
if (pid2 == 0) {
// This is third child which is
// needed to be printed first.
printf(&quot;child[3] --&gt; pid = %d and ppid = %d\n&quot;,
getpid(), getppid());

}

// If value returned from fork()
// in not zero and &gt;0 that means
// this is parent process.
else {
// This is asked to be printed at last
// hence made to sleep for 3 seconds.
sleep(3);
printf(&quot;parent --&gt; pid = %d\n&quot;, getpid());
}
}
}

return 0;
}